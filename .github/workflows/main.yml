name: Build Electron App

on:
  push:
    branches: [ main, master ]  # Trigger on push to main/master
  pull_request:
    branches: [ main, master ]  # Trigger on PRs to main/master
  workflow_dispatch:  # Allow manual trigger

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.CI_TOKEN }}
          submodules: true

      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_OUTPUT

      - name: Get tag name
        id: get_tag_name
        run: |
          VERSION=$(node -p "require('./electros-electron/package.json').version")
          echo "tag_name=v${VERSION}-${GITHUB_SHA::7}-${{ steps.date.outputs.date }}" >> $GITHUB_OUTPUT
          echo "tag_name_nodate=v${VERSION}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Setup step
        if: runner.os != 'Windows'
        run: |
          export CI_TOKEN=${{ secrets.CI_TOKEN }}
          cd ./electros-electron
          chmod +x ./setup.sh
          ./setup.sh
        shell: bash

      - name: Populate Daemons step
        if: runner.os != 'Windows'
        run: |
          export CI_TOKEN=${{ secrets.CI_TOKEN }}
          chmod +x ./populate_daemons.sh
          ./populate_daemons.sh
        shell: bash

      - name: Build step
        if: runner.os != 'Windows'
        run: |
          cd ./electros-electron
          chmod +x ./autobuild.sh
          ./autobuild.sh
        shell: bash

      - name: Create release
        id: create_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create ${{ steps.get_tag_name.outputs.tag_name }} \
            --draft \
            --title "ElectrosRelease ${{ steps.get_tag_name.outputs.tag_name }}" \
            --generate-notes
          # Add a small delay to ensure release is created
          sleep 5

      - name: Upload release assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Verify release exists before uploading
          gh release view ${{ steps.get_tag_name.outputs.tag_name }} || exit 1
          gh release upload ${{ steps.get_tag_name.outputs.tag_name }} \
            "./electros-electron/build/mac/x64/Electros-${{ steps.get_tag_name.outputs.tag_name_nodate }}-mac-x64.dmg" \
            "./electros-electron/build/mac/arm64/Electros-${{ steps.get_tag_name.outputs.tag_name_nodate }}-mac-arm64.dmg" \
            "./electros-electron/build/win/x64/Electros-${{ steps.get_tag_name.outputs.tag_name_nodate }}-win-x64.exe" \
            "./electros-electron/build/linux/arm64/Electros-${{ steps.get_tag_name.outputs.tag_name_nodate }}-linux-arm64.AppImage" \
            "./electros-electron/build/linux/arm64/Electros-${{ steps.get_tag_name.outputs.tag_name_nodate }}-linux-arm64.deb" \
            "./electros-electron/build/linux/x64/Electros-${{ steps.get_tag_name.outputs.tag_name_nodate }}-linux-x64.AppImage" \
            "./electros-electron/build/linux/x64/Electros-${{ steps.get_tag_name.outputs.tag_name_nodate }}-linux-x64.deb"
